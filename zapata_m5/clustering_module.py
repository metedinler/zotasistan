import os
import logging
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from config_module import config

def perform_clustering(data, n_clusters=5, use_hdbscan=False):
    """
    ğŸ“Œ Verilen metin verileri Ã¼zerinde kÃ¼meleme analizi yapar.
    
    Ä°ÅŸ AkÄ±ÅŸÄ±:
      1. Girdi metinler, TfidfVectorizer kullanÄ±larak vektÃ¶rleÅŸtirilir (maksimum 1000 Ã¶zellik).
      2. EÄŸer use_hdbscan True ise HDBSCAN kullanÄ±larak kÃ¼meleme yapÄ±lmaya Ã§alÄ±ÅŸÄ±lÄ±r.
         - HDBSCAN kurulu deÄŸilse hata loglanÄ±r ve KMeans'e geÃ§ilir.
      3. VarsayÄ±lan olarak KMeans, n_clusters parametresi ile belirlenen kÃ¼me sayÄ±sÄ±na gÃ¶re kÃ¼meleme yapar.
      4. KÃ¼me etiketleri (labels) ve KMeans iÃ§in merkezler (centers) elde edilir.
      5. SonuÃ§lar, bir sÃ¶zlÃ¼k ÅŸeklinde (labels, centers, orijinal veriler) dÃ¶ndÃ¼rÃ¼lÃ¼r.
    
    Args:
        data (list): KÃ¼meleme yapÄ±lacak metin verilerinin listesi.
        n_clusters (int, optional): KMeans algoritmasÄ± iÃ§in kÃ¼me sayÄ±sÄ±. VarsayÄ±lan 5.
        use_hdbscan (bool, optional): True ise HDBSCAN algoritmasÄ± kullanÄ±lmaya Ã§alÄ±ÅŸÄ±lÄ±r. VarsayÄ±lan False.
    
    Returns:
        dict or None: KÃ¼meleme analizi sonucunu iÃ§eren sÃ¶zlÃ¼k ({"labels": ..., "centers": ..., "data": ...})
                      veya hata durumunda None.
    """
    if not data or not isinstance(data, list):
        config.logger.error("KÃ¼meleme iÃ§in geÃ§erli veri saÄŸlanamadÄ±.")
        return None

    try:
        # Metin verilerini TF-IDF vektÃ¶rlerine dÃ¶nÃ¼ÅŸtÃ¼r
        vectorizer = TfidfVectorizer(max_features=1000)
        X = vectorizer.fit_transform(data)
        config.logger.info("TF-IDF vektÃ¶rleÅŸtirme tamamlandÄ±.")
        
        if use_hdbscan:
            try:
                import hdbscan
                clusterer = hdbscan.HDBSCAN(min_cluster_size=2)
                labels = clusterer.fit_predict(X.toarray())
                centers = None  # HDBSCAN merkez bilgisi saÄŸlamaz
                config.logger.info("HDBSCAN ile kÃ¼meleme tamamlandÄ±.")
            except ImportError as ie:
                config.logger.error("HDBSCAN kÃ¼tÃ¼phanesi yÃ¼klÃ¼ deÄŸil, KMeans kullanÄ±lacak. (Hata: %s)", ie)
                use_hdbscan = False
        
        if not use_hdbscan:
            clusterer = KMeans(n_clusters=n_clusters, random_state=42)
            labels = clusterer.fit_predict(X)
            centers = clusterer.cluster_centers_.tolist()
            config.logger.info("KMeans ile kÃ¼meleme tamamlandÄ±.")
        
        result = {
            "labels": labels.tolist() if hasattr(labels, "tolist") else list(labels),
            "centers": centers,
            "data": data
        }
        return result

    except Exception as e:
        config.logger.error("KÃ¼meleme analizi sÄ±rasÄ±nda hata: %s", e, exc_info=True)
        return None

# AÅŸaÄŸÄ±da, son 45 gÃ¼nlÃ¼k tartÄ±ÅŸmalarÄ±mÄ±z ve tÃ¼m gÃ¼ncellemeleri gÃ¶z Ã¶nÃ¼ne alarak,
# final versiyonu olan **clustering_module.py** modÃ¼lÃ¼nÃ¼ bulabilirsiniz. Bu modÃ¼l, 
# PDF veya metin verileri Ã¼zerinden kÃ¼meleme analizi yapmayÄ± amaÃ§lÄ±yor. 
# Hem KMeans (varsayÄ±lan) hem de isteÄŸe baÄŸlÄ± olarak HDBSCAN (kurulu ise) kullanÄ±labiliyor. 
# Kod, verilerin TF-IDF vektÃ¶rleÅŸtirilmesini saÄŸlÄ±yor, 
# ardÄ±ndan kÃ¼meleme algoritmasÄ± ile analizi gerÃ§ekleÅŸtiriyor; sonuÃ§lar detaylÄ± loglama ile bildiriliyor.

# ### AÃ§Ä±klamalar

# - **ModÃ¼lÃ¼n AmacÄ±:**  
#   Bu modÃ¼l, verilen metin verileri Ã¼zerinden kÃ¼meleme analizi yapar. AmaÃ§, metinlerin iÃ§erik benzerliklerine gÃ¶re gruplandÄ±rÄ±lmasÄ±nÄ± saÄŸlamaktÄ±r.

# - **Fonksiyonlar:**
#   - **perform_clustering(data, n_clusters=5, use_hdbscan=False):**  
#     - **Girdi:** Bir liste halinde metin verileri, isteÄŸe baÄŸlÄ± kÃ¼me sayÄ±sÄ± ve HDBSCAN kullanÄ±m bayraÄŸÄ±.
#     - **Ä°ÅŸlev:**  
#       1. Metin verilerini TF-IDF yÃ¶ntemiyle vektÃ¶rleÅŸtirir.
#       2. KullanÄ±cÄ± HDBSCAN seÃ§erse, HDBSCAN ile kÃ¼melemeyi dener; eÄŸer kurulu deÄŸilse veya hata alÄ±rsa KMeans'e geÃ§er.
#       3. KMeans ile kÃ¼meleme yaparsa, kÃ¼me etiketlerini (labels) ve merkezleri (centers) elde eder.
#       4. SonuÃ§larÄ±, hem etiketleri hem de merkezleri iÃ§eren bir sÃ¶zlÃ¼k olarak dÃ¶ndÃ¼rÃ¼r.
#     - **Hata YÃ¶netimi:**  
#       TÃ¼m iÅŸlemler try/except bloklarÄ±yla Ã§evrilmiÅŸ, oluÅŸan hatalar config.logger Ã¼zerinden loglanmaktadÄ±r.

# - **DeÄŸiÅŸkenler ve Veri YapÄ±larÄ±:**  
#   - **data:** List tipinde metin verileri.
#   - **n_clusters:** KMeans algoritmasÄ± iÃ§in kÃ¼me sayÄ±sÄ±.
#   - **use_hdbscan:** HDBSCAN algoritmasÄ±nÄ±n kullanÄ±lacaÄŸÄ±na dair bayrak.
#   - **X:** TF-IDF vektÃ¶rleÅŸtirilmiÅŸ veri (scipy sparse matrix).
#   - **result:** SonuÃ§ sÃ¶zlÃ¼ÄŸÃ¼; "labels" (kÃ¼me etiketleri), "centers" (merkezler, KMeans iÃ§in) ve "data" (orijinal veriler).

# - **Kontrol YapÄ±larÄ±:**  
#   - Girdi kontrolÃ¼: GeÃ§erli bir veri listesi saÄŸlanmÄ±ÅŸ mÄ±.
#   - Ä°steÄŸe baÄŸlÄ± HDBSCAN kullanÄ±mÄ±: EÄŸer HDBSCAN yÃ¼klÃ¼ deÄŸilse veya hata alÄ±nÄ±rsa KMeans'e geÃ§ilir.
#   - Try/except bloklarÄ± ile hata yÃ¶netimi saÄŸlanÄ±r.

# Bu final versiyonu, tÃ¼m tartÄ±ÅŸmalarÄ±mÄ±z doÄŸrultusunda geliÅŸmiÅŸ hata yÃ¶netimi,
# loglama ve esnek algoritma seÃ§eneÄŸi (KMeans ve HDBSCAN) sunar. Herhangi ek bir iyileÅŸtirme veya sorunuz varsa lÃ¼tfen belirtin.