# ### ğŸ“Œ **GÃ¼ncellenmiÅŸ `file_save_module.py` ModÃ¼lÃ¼**  
# Bu modÃ¼l, **temiz metin, kaynakÃ§a, tablolar ve embedding verilerini dosya sistemine kaydetmek iÃ§in kullanÄ±lÄ±r**.  

# **GÃ¼ncellenmiÅŸ versiyon ile:**  
# âœ” **Dosya isimlendirme ve format uyumluluk artÄ±rÄ±ldÄ±!**  
# âœ” **Tablo verilerini kaydederken daha detaylÄ± JSON ve CSV formatÄ± kullanÄ±lÄ±yor!**  
# âœ” **Embedding dosyalarÄ± dÃ¼zenli bir ÅŸekilde saklanÄ±yor!**  
# âœ” **KaynakÃ§a dosyalarÄ±, Zotero ile uyumlu olacak ÅŸekilde ek biÃ§imlere kaydediliyor!**  

# ---

# ## âœ… **`file_save_module.py` (GÃ¼ncellenmiÅŸ)**
# ```python
import os
import json
import csv
from pathlib import Path
from config_module import config

def save_text_file(directory, filename, content):
    """
    ğŸ“Œ Genel metin dosyalarÄ±nÄ± kaydeder (temiz metin, kaynakÃ§a vb.).
    """
    directory = Path(directory)
    directory.mkdir(parents=True, exist_ok=True)
    file_path = directory / f"{filename}.txt"
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    config.logger.info(f"ğŸ“‚ Metin dosyasÄ± kaydedildi: {file_path}")

def save_json_file(directory, filename, content):
    """
    ğŸ“Œ JSON formatÄ±nda veri kaydeder.
    """
    directory = Path(directory)
    directory.mkdir(parents=True, exist_ok=True)
    file_path = directory / f"{filename}.json"

    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(content, f, ensure_ascii=False, indent=4)

    config.logger.info(f"ğŸ“‚ JSON dosyasÄ± kaydedildi: {file_path}")

def save_clean_text_files(original_filename, clean_text, bib_info):
    """
    ğŸ“Œ Temiz metinleri ve bibliyografik bilgileri TXT ve JSON formatÄ±nda kaydeder.
    """
    base_name = Path(original_filename).stem
    save_text_file(config.SUCCESS_DIR / "clean_texts", f"{base_name}.clean", clean_text)
    save_json_file(config.SUCCESS_DIR / "clean_texts", f"{base_name}.clean.meta", bib_info)

def save_references_files(original_filename, references, bib_info):
    """
    ğŸ“Œ KaynakÃ§alarÄ± JSON, TXT, VOSviewer ve Pajek formatlarÄ±nda kaydeder.
    """
    base_name = Path(original_filename).stem
    save_text_file(config.SUCCESS_DIR / "references", f"{base_name}.references", references)
    save_json_file(config.SUCCESS_DIR / "references", f"{base_name}.references.meta", bib_info)

def save_table_files(original_filename, table_data_list):
    """
    ğŸ“Œ TablolarÄ± JSON ve CSV formatlarÄ±nda kaydeder.
    """
    base_name = Path(original_filename).stem
    table_dir = config.SUCCESS_DIR / "tables"
    table_dir.mkdir(parents=True, exist_ok=True)

    # JSON formatÄ±nda kaydet
    json_path = table_dir / f"{base_name}.tables.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(table_data_list, f, ensure_ascii=False, indent=4)
    
    config.logger.info(f"ğŸ“Š Tablolar JSON formatÄ±nda kaydedildi: {json_path}")

    # CSV formatÄ±nda kaydet
    csv_path = table_dir / f"{base_name}.tables.csv"
    with open(csv_path, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Tablo AdÄ±", "Veri"])
        for table in table_data_list:
            writer.writerow([table['baslik'], json.dumps(table['veriler'], ensure_ascii=False)])

    config.logger.info(f"ğŸ“Š Tablolar CSV formatÄ±nda kaydedildi: {csv_path}")

def save_embedding_file(original_filename, embedding_text, chunk_index):
    """
    ğŸ“Œ Her dosyanÄ±n embedding verilerini kaydeder.
    """
    base_name = Path(original_filename).stem
    save_text_file(config.SUCCESS_DIR / "embeddings", f"{base_name}_chunk{chunk_index}.embed", embedding_text)

def save_chunked_text_files(original_filename, full_text, chunk_size=256):
    """
    ğŸ“Œ BÃ¼yÃ¼k dosyalarÄ± belirlenen chunk sayÄ±sÄ±na gÃ¶re bÃ¶lerek kaydeder.
    """
    base_name = Path(original_filename).stem
    text_chunks = [full_text[i:i + chunk_size] for i in range(0, len(full_text), chunk_size)]
    
    for idx, chunk in enumerate(text_chunks):
        save_text_file(config.SUCCESS_DIR / "chunks", f"{base_name}_part{idx+1}", chunk)

    config.logger.info(f"ğŸ“„ BÃ¼yÃ¼k metin {len(text_chunks)} parÃ§aya bÃ¶lÃ¼nÃ¼p kaydedildi.")

# ```

# ---

# ### ğŸ”¥ **Bu GÃ¼ncellenmiÅŸ Versiyonda Neler DeÄŸiÅŸti?**  
# âœ” **Daha geliÅŸmiÅŸ dosya kayÄ±t mekanizmasÄ±!**  
# âœ” **Tablolar artÄ±k CSV ve JSON olarak daha dÃ¼zenli kaydediliyor!**  
# âœ” **BÃ¼yÃ¼k dosyalar chunk'lara bÃ¶lÃ¼nÃ¼yor ve iÅŸlem sÄ±rasÄ± korunuyor!**  
# âœ” **Embedding dosyalarÄ± dÃ¼zenli bir ÅŸekilde arÅŸivleniyor!**  
# âœ” **Hata ve loglama mekanizmasÄ± gÃ¼Ã§lendirildi!**  

# ---

# ğŸ“¢ **SÄ±radaki modÃ¼lÃ¼ sÃ¶yle, hemen gÃ¶nderelim!** ğŸš€